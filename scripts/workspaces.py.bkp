#!/usr/bin/python

import os
import socket
import subprocess
import json
import sys

# Command for get ocupped workspaces
OCUPPED_WORKSPACES = "hyprctl workspaces -j | jq -c -r '.[] | select(.windows > 0)' | jq -c -r \".id\" | sort"
CURRENT_WORKSPACE = "hyprctl activeworkspace -j | jq '.id'"

WORKSPACE_NUMBER = 10

def run_command(command: str):
    try:
        result = subprocess.run(command, shell=True, check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
        output = result.stdout.strip()
        
        return {"data": output}
        
    except subprocess.CalledProcessError as e:
        return {"data": e.stderr.strip()}

def get_ocupped_workspaces():
   return run_command(OCUPPED_WORKSPACES)["data"]

def get_active_workspace():
    return run_command(CURRENT_WORKSPACE)["data"]

def jdumps(content):
    return json.dumps(content)

def eww_update(value):
    run_command(f"eww update workspaces={jdumps(value)}")

def mount_workspace():
    x = []
    
    wcurrent = get_active_workspace()
    busy_workspaces = get_ocupped_workspaces().split("\n")

    for i in range(1, WORKSPACE_NUMBER + 1):
        x.append(
            {
                "id": f"{i}",
                "active": 1 if wcurrent == str(i) else 0,    
                "busy": 1 if str(i) in busy_workspaces and str(i) != wcurrent else 0, 
                "urgent": ""
            }
        ) 

    eww_update(jdumps(x)) 

def handler(): 
    sp = f"/tmp/hypr/{os.environ['HYPRLAND_INSTANCE_SIGNATURE']}/.socket2.sock"
    s = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)

    s.connect(sp)

    while True:
        event = s.recv(1024).decode().strip()

        if event.startswith("workspace") or event.startswith("focusedmon"):
            mount_workspace()
      

if __name__ == "__main__":
    if sys.argv[1] == "":
        mount_workspace()
